services:
  # Backend PHP service (Symfony)
  php:
    build:
      context: ./backend
      target: frankenphp_dev
    restart: unless-stopped
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}:${HTTPS_PORT:-443}/.well-known/mercure}
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
      FRANKENPHP_WORKER_CONFIG: watch
      MERCURE_EXTRA_DIRECTIVES: demo
      XDEBUG_MODE: "${XDEBUG_MODE:-off}"
      APP_ENV: "${APP_ENV:-dev}"
    volumes:
      - ./backend:/app
      - ./backend/frankenphp/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./backend/frankenphp/conf.d/20-app.dev.ini:/usr/local/etc/php/app.conf.d/20-app.dev.ini:ro
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp
    extra_hosts:
      - host.docker.internal:host-gateway
    tty: true

  # Database service (PostgreSQL)
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    ports:
      - "${DB_PORT:-5432}:5432"

  # Database admin interface
  adminer:
    image: adminer
    restart: always
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DESIGN: dark
      ADMINER_DEFAULT_SERVER: database

  # Frontend service (Nuxt.js)
  frontend:
    image: node:lts-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent host node_modules from being mounted
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    command: sh -c "npm install && npm run dev"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - API_BASE=http://localhost/api

volumes:
  caddy_data:
  caddy_config:
  database_data:
